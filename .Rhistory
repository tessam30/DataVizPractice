now  <- Sys.time()
now
typeof(now)
class(now)
unclass(now)
source('~/.active-rstudio-document', echo=TRUE)
mil
now
gender <- factor*c("male", "female", "female", "male")
gender <- factor*c("male", "female", "female", "male")
source('~/.active-rstudio-document', echo=TRUE)
gender
typeof(gender)
attributes(gender)
unclass(gender)
as.character(gender)
card <- c("ace", "hearts", 1)
str(card)
card2  <- c("TRUE", "FALSE", 0, 10)
str(card2)
card2  <- c(TRUE, FALSE, 0, 10)
str(card2)
sum(card2)
list1 <- list(100:130, "R", list(TRUE, FALES))
list1 <- list(100:130, "R", list(TRUE, FALSE))
list1
list.cards <- list(1, "ace", "hearts")
list.cards
list.cards <- list("ace", "hearts", 1)
df <- data.frame(face = c("ace", "two", "six"), suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 6))
type(df)
typeof(Df)
typeof(df)
str(df)
class(df)
url <- c("https://raw.githubusercontent.com/shifteight/R/master/HandsOn/deck.csv")
d <- read.csv(url)
View(d)
View(d)
str(d)
head(d)
d(1, 1:3)
d[1, 1:3]
d[1, ]
d[1, :]
d[c(1,1) , ]
d[c(1, 2), c(1,2)]
names(d)
deck[, "suit"]
d[, "suit"]
deal <- function(cards) {
cards[1, ]
}
deal(d)
deck2 <- d[1:52, ]
random <- sample(1:52, size = 52)
random
deck4 <- d[random, ]
head(deck4)
deck4 <- d[random, ]
head(deck4)
deck4 <- d[random, ]
head(deck4)
deal <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal(d)
deal(d)
head(deal(d))
head(deal(d))
shuffle <- function(cards){
random <- sample(1:52, size = 52)
cards[random, ]
}
deak(d)
deal(d)
head(deal(d))
deck2 <- shuffle(d)
head(deal(deck2))
head(deal(deck2))
head(deal(deck2))
d$value
mean(d$value)
median(d$value)
deck2 <- d
deck2$new <- 1:52
x <- c(F, T, F)
sum(x)
as.numeric(x)
mean(x)
x <- list(1:3, "A", c(T, F, T), c(2.9, 5.9))
x
str(x)
x <- list(list(list(list())))
x
str(x)
is.recursive(x)
?is.recursive()
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(X)
x
str(X)
str(x)
str(y)
typeof(y)
is.list(mtcars)
md <- lm(mpg ~ wt, data = mtcars)
is.list(md)
md
c(1, f)
c(1, F)
c("a", 1)
c(list(1), "a")
str(c(list(1), "a"))
c(T, 1L)
search
list
list()
ls()
md
x
unlist(x)
unlist(x)[1]
unlist(x)[2]
unlist(x)[4]
x
str(x)
c(F, NA_character_)
y <- 1:10
attr(y, "my_attribute") <-"This is a vector"
attr(y, "my_attribute")
attributes(y)
str(attributes(y))
structure(1:10, my_attribute = "This is a vector")
attributes(y[1])
names(y)
dim(y)
y
class(y)
attr(y, "dim")
dim(y)
ls()
x <- c(a = 1, b = 2, c = 3)
x
x <- 1:3; names(x) <- c("a", "b", "c")
x
x <- factor(c("a", "b", "c", "d"))
x
class(x)
levels(x)
x[2] <- "e"
sex_char <- c("m")
sex_char <- c("m", "m", "m")
sex_char
sex_char <- factor(sex_char, levels = c("m", "f"))
sex_char
table(sex_char)
table(sex_factor)
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_factor)
?structure()
structure(1:6, dim = 2:3)
?comment()
help(rev)
x <- c(1:5, 5:3)
x
rev(x)
a <- matrix(1:5, ncol = 3, nrow = 2)
a <- matrix(1:6, ncol = 3, nrow = 2)
a
x <- c(2.1, 4.2, 3.3, 5.4)
x
x[c(1, 3)]
x[order(X)]
x[order(x)]
x[-c(1, 3)]
x[x>3]
x[x>==3]
x[x==3]
x[x==3.3]
x[]
x[0]
y <- setNames(x, letters[1:4)
y <- setNames(x, letters[1:4])
y
x
mtcars[mtcars$cyl == 4]
mtcars[mtcars$cyl = 4]
View(mtcars)
mtcars[mtcars$cyl == 4]
View(mtcars)
table(mtcars$cyl)
mtcars[mtcars$cyl == 4, ]
mtcars[1:$]
mtcars[1:4]
mtcars[mtcars$cyl <= 4, ]
mtcars[mtcars$cyl <= 5, ]
mtcars[mtcars$cyl == c(4, 6), ]
mtcars[[1]]
mtcars[["cyl"]]
mod <- lm(mpg ~ wt, data = mtcars)
print(mod)
str(mod)
list(mod)
summary(mod)
str(summary(mod))
mod$r.squared
View(mod)
str(mod)
mo[$r.squared]
summary(mod)
str(summary(mod))
summary(mod$df.residual)
summary(mod$residuals)
(mod$residuals)
sum(mod$residuals)
sum(mod$residuals^2)
sampe(10)
sample(10)
sample(10) < 4
x <- sample(10) < 4
which(x)
x
sample(10)
qplot(cut, clarity, data = diamonds, stat = "sum", group = 1)
library(ggplot2)
qplot(cut, clarity, data = diamonds, stat = "sum", group = 1)
View(diamonds)
# Food court Data visualization and processing
library(ggplot2)
library(dplyr)
library(stringr)
library(RColorBrewer)
library(lubridate)
library(reshape2)
library(colorspace)
# Lab RGB colors
redL   <- c("#B71234")
dredL  <- c("#822443")
dgrayL <- c("#565A5C")
lblueL <- c("#7090B7")
dblueL <- c("#003359")
lgrayL <- c("#CECFCB")
setwd("~/GitHub/DataVizPractice")
fcd <- tbl_df(read.csv("food.court.dates.csv", stringsAsFactors = FALSE, strip.white=TRUE))
# What is the structure of the data? Reads in as characters and intergers; Need to coerce to dates;
fcd$Date <- mdy(fcd$Date)
fcd$pDate <- mdy_hm(fcd$Timevalue)
fcd <- select(fcd, -X)
# Rename a few variables to avoid confusion
fcd <- rename(fcd, dayOfMonth = Day, dayOfWeek = day)
# Set months as factors to make ordering easy; Same for days
fcd$Month = factor(fcd$Month,levels=c("January","February","March",
"April","May","June","July","August","September",
"October","November","December"), ordered=TRUE)
fcd$dow <- factor(fcd$dayOfWeek, levels = c("Sunday", "Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday"), ordered = TRUE)
fcd$tod <- factor(fcd$Time, levels = c("7:00", "7:15", "7:30", "7:45",
"8:00", "8:30", "9:00", "10:00", "10:30", "10:45",
"11:00", "11:15", "11:30", "11:45", "12:00",
"12:15", "12:30", "12:45", "13:00", "13:15",
"13:30", "13:45", "14:00", "14:30", "14:45",
"15:00", "15:30", "16:00", "16:30", "17:00", "17:15",
"17:30", "17:45", "18:00", "18:15", "18:30", "21:00"),
ordered = TRUE)
# Verify factors sorted and mapped correctly
table(fcd$tod, fcd$Time)
# Average and Total visitors by day, month & time of day;
# Have Laura show to how to convert to function
fcd <- group_by(fcd, dayOfMonth) %>%
mutate(domAve = mean(Visitors), na.rm = TRUE, domTotal = sum(Visitors)) %>%
arrange(desc(domAve))
# Food court Data visualization and processing
library(ggplot2)
library(dplyr)
library(stringr)
library(RColorBrewer)
library(lubridate)
library(reshape2)
library(colorspace)
# Lab RGB colors
redL   <- c("#B71234")
dredL  <- c("#822443")
dgrayL <- c("#565A5C")
lblueL <- c("#7090B7")
dblueL <- c("#003359")
lgrayL <- c("#CECFCB")
setwd("~/GitHub/DataVizPractice")
fcd <- tbl_df(read.csv("food.court.dates.csv", stringsAsFactors = FALSE, strip.white=TRUE))
# What is the structure of the data? Reads in as characters and intergers; Need to coerce to dates;
fcd$Date <- mdy(fcd$Date)
fcd$pDate <- mdy_hm(fcd$Timevalue)
# Food court Data visualization and processing
library(ggplot2)
library(dplyr)
library(stringr)
library(RColorBrewer)
library(lubridate)
library(reshape2)
library(colorspace)
# Lab RGB colors
redL   <- c("#B71234")
dredL  <- c("#822443")
dgrayL <- c("#565A5C")
lblueL <- c("#7090B7")
dblueL <- c("#003359")
lgrayL <- c("#CECFCB")
setwd("~/GitHub/DataVizPractice")
fcd <- tbl_df(read.csv("food.court.dates.csv", stringsAsFactors = FALSE, strip.white=TRUE))
# What is the structure of the data? Reads in as characters and intergers; Need to coerce to dates;
fcd$Date <- mdy(fcd$Date)
# Food court Data visualization and processing
library(ggplot2)
library(stringr)
library(RColorBrewer)
library(lubridate)
library(reshape2)
library(colorspace)
library(dplyr)
# Lab RGB colors
redL   <- c("#B71234")
dredL  <- c("#822443")
dgrayL <- c("#565A5C")
lblueL <- c("#7090B7")
dblueL <- c("#003359")
lgrayL <- c("#CECFCB")
setwd("~/GitHub/DataVizPractice")
fcd <- tbl_df(read.csv("food.court.dates.csv", stringsAsFactors = FALSE, strip.white=TRUE))
fcd$Date <- mdy(fcd$Date)
fcd$pDate <- mdy_hm(fcd$Timevalue)
fcd$Time
fcd <- rename(fcd, dayOfMonth = Day, dayOfWeek = day)
# Set months as factors to make ordering easy; Same for days
fcd$Month = factor(fcd$Month,levels=c("January","February","March",
"April","May","June","July","August","September",
"October","November","December"), ordered=TRUE)
fcd$dow <- factor(fcd$dayOfWeek, levels = c("Sunday", "Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday"), ordered = TRUE)
fcd$tod <- factor(fcd$Time, levels = c("7:00", "7:15", "7:30", "7:45",
"8:00", "8:30", "9:00", "10:00", "10:30", "10:45",
"11:00", "11:15", "11:30", "11:45", "12:00",
"12:15", "12:30", "12:45", "13:00", "13:15",
"13:30", "13:45", "14:00", "14:30", "14:45",
"15:00", "15:30", "16:00", "16:30", "17:00", "17:15",
"17:30", "17:45", "18:00", "18:15", "18:30", "21:00"),
ordered = TRUE)
# Verify factors sorted and mapped correctly
table(fcd$tod, fcd$Time)
fcd <- group_by(fcd, dayOfMonth) %>%
mutate(domAve = mean(Visitors), na.rm = TRUE, domTotal = sum(Visitors)) %>%
arrange(desc(domAve))
fcd <- group_by(fcd, dayOfMonth) %>%
mutate(domAve = mean(Visitors), na.rm = TRUE, domTotal = sum(Visitors)) %>%
arrange(desc(domAve))
fcd <-  group_by(fcd, dayOfWeek) %>%
mutate(dowAve = mean(Visitors), na.rm = TRUE, dowTotal = sum(Visitors)) %>%
arrange(desc(dowTotal))
fcd <-  group_by(fcd, Time) %>%
mutate(timeAve = mean(Visitors), na.rm = TRUE, timeTotal = sum(Visitors)) %>%
arrange(desc(timeTotal))
fcd <-  group_by(fcd, Month) %>%
mutate(monthAve = mean(Visitors), na.rm = TRUE, monthTotal = sum(Visitors)) %>%
arrange(desc(monthTotal))
fcd <- group_by(fcd, Date) %>%
mutate(dateAve = mean(Visitors), na.rm = TRUE, dateTotel = sum(Visitors))
fcdTime <- group_by(fcd, Time) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(Time, freqVisits))
fcdTime
fcdTime <- group_by(fcd, Time) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(Time, totVisit))
fcdTime
# What time of the day should I avoid the food court?
fcdTime <- group_by(fcd, Time) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(totVisit, Time))
fcdTime
fcd %>% group_by(dayOfMonth) %>%
summarise(aveVisit = mean(Visitors) na.rm = TRUE, sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(aveVisit, freqVisits))
fcd %>% group_by(dayOfMonth) %>%
summarise(aveVisit = mean(Visitors), na.rm = TRUE, sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(aveVisit, freqVisits))
# What day of the month has the highest average of visitors?
fcd %>% group_by(dayOfMonth) %>%
summarise(aveVisit = mean(Visitors), na.rm = TRUE, sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(aveVisit, freqVisits))
# What days of the week have the highest average of visitors?
fcd %>% group_by(dayOfWeek) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(aveVisit, freqVisits))
# What day of the month has the most number of visitors?
tmp <- group_by(fcd, Month, dow) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors))#, maxVisit = max(Visitors),
#minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
#arrange(desc(aveVisit, freqVisits))
widthDDheat = 3.25*2*1.15
tmp.m <- melt(tmp, id = c("Month", "dow"))
tmp.dt <- group_by(fcd, dow, tod) %>%
summarise(aveVisit = mean(Visitors)) %>%arrange(tod)
tmp.dtm <- melt(tmp.dt, id = c("dow", "tod"))
ggplot(tmp.dtm, aes(tod, dow)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = dow, x = tod, label = round(value, 0)), size = 4) +
theme_ops
theme_ops <-  theme_minimal() + theme(legend.position = "top",
legend.key = element_blank(),
legend.text = element_text(size = 14),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())#,
#panel.background = element_rect(fill = "gray97"),
#panel.border = element_blank())
# Plot food court data by Day and time
tmp.dt <- group_by(fcd, dow, tod) %>%
summarise(aveVisit = mean(Visitors)) %>%arrange(tod)
tmp.dtm <- melt(tmp.dt, id = c("dow", "tod"))
ggplot(tmp.dtm, aes(tod, dow)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = dow, x = tod, label = round(value, 0)), size = 4) +
theme_ops
tmp.dtm$dow <- factor(tmp.dtm$dow, levels = rev(levels(tmp.dtm$dow)))
ggplot(tmp.dtm, aes(tod, dow)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = dow, x = tod, label = round(value, 0)), size = 4) +
theme_ops
theme_ops <-  theme_minimal() + theme(legend.position = "right",
legend.key = element_blank(),
legend.text = element_text(size = 14),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())#,
#panel.background = element_rect(fill = "gray97"),
#panel.border = element_blank())
ggplot(tmp.dtm, aes(tod, dow)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = dow, x = tod, label = round(value, 0)), size = 4) +
theme_ops
tmp.mt <- group_by(fcd, Month, tod) %>%
summarise(aveVisit = mean(Visitors)) %>%arrange(tod)
tmp.mtm <- melt(tmp.mt, id = c("Month", "tod"))
ggplot(tmp.mtm, aes(tod, Month)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = Month, x = tod, label = round(value, 0)), size = 4) +
theme_ops
tmp.mtm$Month <- factor(tmp.mtm$Month, levels = rev(levels(tmp.mtm$Month)))
ggplot(tmp.mtm, aes(tod, Month)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = Month, x = tod, label = round(value, 0)), size = 4) +
theme_ops
tmp.md <- group_by(fcd, Month, dow) %>%
summarise(aveVisit = mean(Visitors))
tmp.mdm <- melt(tmp.md, id = c("Month", "dow"))
tmp.mdm$dow <-  factor(tmp.mdm$dow, levels = rev(levels(tmp.mdm$dow)))
ggplot(tmp.mdm, aes(x = Month, y = dow)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="", title = "Food Court Voucher Sales (average / day)") +
geom_text(aes(y = dow, x = Month, label = round(value, 0)), size = 4) + theme_ops
tmp.domtod <- group_by(fcd, dayOfMonth, tod) %>%
summarise(aveVisit = mean(Visitors))
tmp.domtodm <- melt(tmp.domtod, id = c("dayOfMonth", "tod"))
ggplot(tmp.domtodm, aes(x = tod, y = dayOfMonth)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") + scale_y_reverse(breaks = 31:1) +
geom_text(aes(y = dayOfMonth, x = tod, label = round(value, 0)), size = 4) +
theme_ops
ggplot(tmp.domtodm, aes(x = tod, y = dayOfMonth)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="Day of Month") + scale_y_reverse(breaks = 31:1) +
geom_text(aes(y = dayOfMonth, x = tod, label = round(value, 0)), size = 4) +
theme_ops
ggplot(fcd, aes(x = dayOfMonth, y = tod, size = Visitors, colour = Visitors)) + geom_point() + facet_wrap(~dow, ncol = 7) +
geom_jitter() + scale_color_continuous() + theme_minimal()
fcd$dow <- factor(fcd$dow, levels = rev(levels(fcd$dow)))
ggplot(fcd, aes(x = Month, y = dow, color = Visitors, size = (Visitors))) + geom_point() + geom_jitter() +
theme_minimal()
fcd$tod <- factor(fcd$tod, levels = rev(levels(fcd$tod)))
ggplot(fcd, aes(x = dayOfMonth, y = tod, size = Visitors, color = Month)) + geom_point() +
scale_colour_manual(values = clr) + scale_x_continuous(breaks = 1:31) + theme_bw() + geom_jitter()
ggplot(fcd, aes(x = Date, y = Visitors)) + geom_step()
ggplot(fcd, aes(x = Date, y = tod, color = Month, size = dateTotel)) + geom_point(position = "jitter") + theme_minimal()
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
crime
head(Crime)
head(crime)
install.packages("aplpack")
library(aplpack)
faces(crime[,2:14])
faces(crime[,2:8])
faces(crime_filled[,2:8], labels=crime_filled$state)
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state)), crime[,7:8])
faces(crime_filled[,2:8], labels=crime_filled$state)

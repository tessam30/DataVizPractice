hist(vapply(model_rep, rsquared, double(1)))
sample(nrow(mpg$hwy))
sample(nrow(mpg$hwy), replace = TRUE)
sample(nrow(mpg$hwy), replace = Tlm(hwy ~ class + displ, data = mpg)RUE)
lm(hwy ~ class + displ, data = mpg)
mod <- lm(hwy ~ class + displ, data = mpg)
summary(mod)
str(summary(mod))
summary(mod)$r.squared
attr(mtcars)
attributes(mtcars)
str(mtcars)
dim(mtcars)
?attr()
x <- 1:10
attr(x,"dim") <- c(2, 5)
attr(x)
attributes(x)
# Attributes add arbitrary additional
# metadata to  any base type
x <-  1:6
attr(x, "max")  <-  5
attr(x, "max")
attributes(x)
# structure returns a modified  object  with  attrs
structure(1:10, max  = 5)
f <- factor(c("a", "b", "c"))
typeof(f) # Built on top of integer
attributes(f) # Use levels and class attributes
d <- data.frame(f)
typeof(d) # Built on top of list
attributes(d) # names, row.names and class
x <- c(-1, 0, 1, 2, 3)
p <- c(0.2, 0.1, 0.3, 0.1, 0.3)
# Ways to store
structure(x, prob = p)
structure(p, val = x)
list(x = x, p = p)
data.frame(x, p)
methods("print")
methods("summary")
print.date()
print.dat
print.date
print.factor(
)
print.factor
methods(class = data.frame())
as.list.data.frame
dimnames.data.frame
t.data.frame
print
as.data.frame.data.frame
t.test
print.rv <- function(x, ...) {
cat("THIS IS MY METHOD\n")
}
dice <- rv(1:6)
dice
source('~/rTraining/rTrainingDay1.r')
# Simple constructor ----------------------------------------------------------
rv <- function(x, probs = NULL) {
if (is.null(probs)) {
probs <- rep(1, length(x)) / length(x)
}
structure(x, probs = probs, class = "rv")
}
# Safer constructor ------------------------------------------------------------
rv <- function(x, probs = NULL) {
if (is.null(probs)) {
probs <- rep(1, length(x)) / length(x)
} else {
if (length(x) != length(probs))
stop("`x` and `probs` must be same length")
check_probs(probs)
}
# Simplify by summing probabilities with equal x's. Need to use
# addNA since otherwise tapply silently drops groups with missing values
grp <- addNA(x, ifany = TRUE)
x_new <- as.vector(tapply(x, grp, "[", 1))
probs <- as.vector(tapply(probs, grp, sum))
# Set probs and class attributes
structure(x_new, probs = probs, class = "rv")
}
check_probs <- function(x) {
if (!is.numeric(x)) {
stop("`prob` must be numeric.")
}
if (any(is.na(x))) {
stop("`prob` must not contain any NA")
}
if (any(x < 0)) {
stop("All `prob` must be >= 0")
}
if (abs(sum(x) - 1) > 1e-6) {
stop("`sum(prob)` must equal 1")
}
}
# Some helpers -----------------------------------------------------------------
is.rv <- function(x) inherits(x, "rv")
probs <- function(x) attr(x, "probs")
P <- function(x) {
stopifnot(is.logical(x), is.rv(x))
sum(probs(x)[x])
}
# Basic methods ----------------------------------------------------------------
print.rv <- function(x, ...) {
X <- format(x, digits = 3)
P <- format(probs(x), digits = 3)
out <- cbind(X = X, "P(X)" = P)
rownames(out) <- rep("", nrow(out))
print(out, quote = FALSE)
}
plot.rv <- function(x, ...) {
name <- deparse(substitute(x))
ylim <- range(0, probs(x))
plot(as.numeric(x), probs(x), type = "h", ylim = ylim,
xlab = name, ylab = paste0("P(", name, ")"), ...)
points(as.numeric(x), probs(x), pch = 20)
abline(h = 0, col = "gray")
}
mean.rv <- function(x, ...) {
sum(x * probs(x))
}
# Methods that use inheritance ------------------------------------------------
`[.rv` <- function(x, i, ...) {
rv(NextMethod(), prop.table(probs(x)[i]))
}
abs.rv <- function(x)                 rv(NextMethod(), probs(x))
log.rv <- function(x, base = exp(1))  rv(NextMethod(), probs(x))
exp.rv <- function(x)                 rv(NextMethod(), probs(x))
sqrt.rv <- function(x)                rv(NextMethod(), probs(x))
# OR
Math.rv <- function(x) rv(NextMethod(), probs(x))
# Combine two independent random variables -------------------------------------
as.rv <- function(x) UseMethod("as.rv")
as.rv.rv <- function(x) x
as.rv.numeric <- function(x) rv(x)
as.rv.logical <- function(x) rv(x)
# Combine two independent random variables (including the special case
# of a random variable and a number). We basically generate the complete
# two way table, and then collapse down to a random variable
combine <- function(e1, e2, fun) {
e1 <- as.rv(e1)
e2 <- as.rv(e2)
# Use outer to generate all pairwise combinations, combining using fun
vals <- outer(e1, e2, fun)
# Probabilities get multipled together
probs <- outer(probs(e1), probs(e2), "*")
# Rely on rv to collapse any duplicates
rv(as.vector(vals), as.vector(probs))
}
"+.rv" <-   function(e1, e2) combine(e1, e2, `+`)
"-.rv" <-   function(e1, e2) combine(e1, e2, `-`)
"/.rv" <-   function(e1, e2) combine(e1, e2, `/`)
# OR
Ops.rv <- function(e1, e2) combine(e1, e2, .Generic)
print.rv <- function(x, ...) {
cat("THIS IS MY METHOD\n")
}
dice <- rv(1:6)
dice
?cat()
dice
dice <- rv(1:6)
print.rv <- function(x, ...) {
cat("THIS IS MY METHOD\n")
print("or this")
}
dice <- rv(1:6)
dice
plot.rv <- function(x, ...) {
name <- deparse(substitute(x))
ylim <- range(0, probs(x))
plot(as.numeric(x), probs(x), type = "h", ylim = ylim,
xlab = name, ylab = paste0("P(", name, ")"), ...)
points(as.numeric(x), probs(x), pch = 20)
abline(h = 0, col = "gray")
}
dice
plot.rv(dice)
plot.rv(dice)
rrev.default(
)
rrev.default
rev.default
library(dplyr)
dplyr
?dlpyr
?dplyr
install.packages("dplyr")
library(dplry)
library("dplyr", lib.loc="~/R/win-library/3.1")
dlpry?
?dplyr()
help(dplyr)
vignette()
library("dplyr", lib.loc="~/R/win-library/3.1")
help(dlpyr)
vignette()
browseVignettes()
library(dplyr)
set.seed(2014)
centers <- data.frame(cluster=factor(1:3), size=c(100, 150, 50), x1=c(5, 0, -3), x2=c(-1, 1, -2))
points <- centers %>% group_by(cluster) %>%
do(data.frame(x1=rnorm(.$size[1], .$x1[1]),
x2=rnorm(.$size[1], .$x2[1])))
library(ggplot2)
ggplot(points, aes(x1, x2, color=cluster)) + geom_point()
install.packages("xtboost")
system.file(package =
"devtools")
system.file(package ="devtools")
install.packages("devtools")
system.file(package =
"devtools")
install.packages(c("devtools", "roxygen2", "testthat", "pryr",
"microbenchmark"))
devtools::dr_devtools()
install.packages("installr") # install
setInternet2(TRUE) # saves some troubles
installr::updateR() # updating R.
install.packages("devtools")
install.packages(c("devtools", "roxygen2", "testthat", "pryr",
"microbenchmark"))
devtools::dr_devtools()
find_rtools()
find_rtools()
devtools::dr_devtools()
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
devtools::dr_devtools()
library(rattle)
install.package("rattle")
install.packages("rattle")
library(rattle)
rattle()
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
---
title: "StataTraining"
author: "Tim Essam"
date: "December 15, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata14/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
install.packages("formattable")
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = color_bar("pink", 0.2),
test2_score = color_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = color_bar("pink", 0.2),
test2_score = color_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formatable)
library(formattable)
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span",
style = x ~ ifelse(x == "A", style(color = "green", font.weight = "bold"), NA)),
test1_score = color_bar("pink", 0.2),
test2_score = color_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
devtools::install_github("renkun-ken/formattable")
install.packages("praise")
library(praise)
names(praise)
install.packages("tidyr")
install.packages("gapminder")
library(dplyr)
library(gapminder)
library(ggplot2)
ggplot(gapminder, aes(year, lifeExp)) + geom_line(eas(group = country))
ggplot(gapminder, aes(year, lifeExp)) + geom_line(aes(group = country))
by_country <- gapminder %>% group_by(continent, country) %>% nest()
library(devtools)
library("devtools")
install.packages("devtools")
devtools::install_github("hadley/tidyr")
library(tidyr)
by_country <- gapminder %>% group_by(continent, country) %>% nest()
View(by_country)
library(tidyr)
library(dplyr)
library(gapminder)
library(ggplot)
ggplot(gapminder, aes(year, lifeExp)) +
geom_line(aes(group = country))
library(ggplot2)
ggplot(gapminder, aes(year, lifeExp)) +
geom_line(aes(group = country))
by_country <- gapminder %>%
group_by(continent, country) %>%
nest()
by_country$data[[1]]
by_country <- by_country %>%
mutate(model = purrr::map(data, ~ lm(lifeExp ~ year, data = .))
)
intall.packages("purrr")
install.packages("purrr")
by_country <- by_country %>%
mutate(model = purrr::map(data, ~ lm(lifeExp ~ year, data = .))
)
by_country %>% unnest(data)
by_country %>% unnest(model %>% purrr::map(broom::glance))
library(broom)
by_country %>% unnest(model %>% purrr::map(broom::tidy))
by_country %>% unnest(model %>% purrr::map(broom::augment))
install.packages("devtools")
library(devtools)
devtools::install_github("flaneuese/llamar")
devtools::install_github("flaneuse/llamar")
library(llamar)
# Food court Data visualization and processing
library(ggplot2)
library(stringr)
library(RColorBrewer)
library(lubridate)
library(reshape2)
library(colorspace)
library(dplyr)
# Lab RGB colors
redL   <- c("#B71234")
dredL  <- c("#822443")
dgrayL <- c("#565A5C")
lblueL <- c("#7090B7")
dblueL <- c("#003359")
lgrayL <- c("#CECFCB")
setwd("~/GitHub/DataVizPractice")
fcd <- tbl_df(read.csv("food.court.dates.csv", stringsAsFactors = FALSE, strip.white=TRUE))
# What is the structure of the data? Reads in as characters and intergers; Need to coerce to dates and factors
fcd$Date <- mdy(fcd$Date)
str(fcd$MonthName)
fcd$MonthName <- as.factor(fcd$MonthName)
fcd$Time <- as.factor(fcd$Time)
# Rename a few variables to avoid confusion
fcd <- rename(fcd, dayOfMonth = Day, dayOfWeek = day, mo = Month, Month = MonthName )
# Set months as factors to make ordering easy; Same for days
fcd$Month = factor(fcd$Month,levels=c("January","February","March",
"April","May","June","July","August","September",
"October","November","December"), ordered=TRUE)
fcd$dow <- factor(fcd$dayOfWeek, levels = c("Sunday", "Monday", "Tuesday", "Wednesday",
"Thursday", "Friday", "Saturday"), ordered = TRUE)
fcd$tod <- factor(fcd$Time, levels = c("7:00", "7:15", "7:30", "7:45",
"8:00", "8:30", "9:00", "10:00", "10:30", "10:45",
"11:00", "11:15", "11:30", "11:45", "12:00",
"12:15", "12:30", "12:45", "13:00", "13:15",
"13:30", "13:45", "14:00", "14:30", "14:45",
"15:00", "15:30", "16:00", "16:30", "17:00", "17:15",
"17:30", "17:45", "18:00", "18:15", "18:30", "21:00"),
ordered = TRUE)
# Verify factors sorted and mapped correctly
table(fcd$tod, fcd$Time)
# Average and Total visitors by day, month & time of day;
# Have Laura show to how to convert to function
fcd <- group_by(fcd, dayOfMonth) %>%
mutate(domAve = mean(Visitors), na.rm = TRUE, domTotal = sum(Visitors)) %>%
arrange(desc(domAve))
fcd <-  group_by(fcd, dayOfWeek) %>%
mutate(dowAve = mean(Visitors), na.rm = TRUE, dowTotal = sum(Visitors)) %>%
arrange(desc(dowTotal))
fcd <-  group_by(fcd, Time) %>%
mutate(timeAve = mean(Visitors), na.rm = TRUE, timeTotal = sum(Visitors)) %>%
arrange(desc(timeTotal))
fcd <-  group_by(fcd, Month) %>%
mutate(monthAve = mean(Visitors), na.rm = TRUE, monthTotal = sum(Visitors)) %>%
arrange(desc(monthTotal))
fcd <- group_by(fcd, Date) %>%
mutate(dateAve = mean(Visitors), na.rm = TRUE, dateTotel = sum(Visitors))
# What time of the day should I avoid the food court?
fcdTime <- group_by(fcd, Time) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(totVisit, Time))
# What day of the month has the highest average of visitors?
fcd %>% group_by(dayOfMonth) %>%
summarise(aveVisit = mean(Visitors), na.rm = TRUE, sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(aveVisit, freqVisits))
# What days of the week have the highest average of visitors?
fcd %>% group_by(dayOfWeek) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors), maxVisit = max(Visitors),
minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
arrange(desc(aveVisit, freqVisits))
# What day of the month has the most number of visitors?
tmp <- group_by(fcd, Month, dow) %>%
summarise(aveVisit = mean(Visitors), sdVisit = sd(Visitors))#, maxVisit = max(Visitors),
#minVisit = min(Visitors), nVisits = n(), totVisit = sum(Visitors)) %>%
#arrange(desc(aveVisit, freqVisits))
# Plot food court data by time of the day using grouping averages
# Plotting sizes
widthDDheat = 3.25*2*1.15
heightDDheat = 3*2
widthDDavg = 1.85
tmp.m <- melt(tmp, id = c("Month", "dow"))
theme_ops <-  theme_minimal() + theme(legend.position = "right",
legend.key = element_blank(),
legend.text = element_text(size = 14),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank())#,
#panel.background = element_rect(fill = "gray97"),
#panel.border = element_blank())
tmp.dt <- group_by(fcd, dow, tod) %>%
summarise(aveVisit = mean(Visitors)) %>%arrange(tod)
tmp.dtm <- melt(tmp.dt, id = c("dow", "tod"))
tmp.dtm$dow <- factor(tmp.dtm$dow, levels = rev(levels(tmp.dtm$dow)))
ggplot(tmp.dtm, aes(tod, dow)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = dow, x = tod, label = round(value, 0)), size = 4) +
theme_ops
tmp.mt <- group_by(fcd, Month, tod) %>%
summarise(aveVisit = mean(Visitors)) %>%arrange(tod)
tmp.mtm <- melt(tmp.mt, id = c("Month", "tod"))
tmp.mtm$Month <- factor(tmp.mtm$Month, levels = rev(levels(tmp.mtm$Month)))
ggplot(tmp.mtm, aes(tod, Month)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="") +
geom_text(aes(y = Month, x = tod, label = round(value, 0)), size = 4) +
theme_ops
# Summarise by Month day
tmp.md <- group_by(fcd, Month, dow) %>%
summarise(aveVisit = mean(Visitors))
tmp.mdm <- melt(tmp.md, id = c("Month", "dow"))
tmp.mdm$dow <-  factor(tmp.mdm$dow, levels = rev(levels(tmp.mdm$dow)))
ggplot(tmp.mdm, aes(x = Month, y = dow)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradientn(colours = brewer.pal(9, "YlOrRd"), name = 'food court visitors') +
labs(x = "", y="", title = "Food Court Voucher Sales (average / day)") +
geom_text(aes(y = dow, x = Month, label = round(value, 0)), size = 4) + theme_ops
